name: Documind Production Deployment

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      version:
        description: 'Version tag to deploy (leave empty for latest)'
        required: false
      confirm:
        description: 'Type "deploy" to confirm'
        required: true

env:
  DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
  REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}

jobs:
  validate:
    name: Validate Deployment
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
      version: ${{ steps.set-version.outputs.version }}
    
    steps:
      - name: Set environment
        id: set-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi
          
      - name: Set version
        id: set-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "version=sha-$(echo ${{ github.sha }} | cut -c 1-7)" >> $GITHUB_OUTPUT
          fi
          
      - name: Validate production deployment
        if: steps.set-env.outputs.environment == 'production'
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.confirm }}" != "deploy" ]]; then
              echo "::error::Production deployments require confirmation. Please type 'deploy' to confirm."
              exit 1
            fi
          fi

  build:
    name: Build and Push Docker Image
    needs: validate
    runs-on: ubuntu-latest
    environment: ${{ needs.validate.outputs.environment }}
    outputs:
      image: ${{ steps.image-info.outputs.image }}
      tag: ${{ steps.image-info.outputs.tag }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
          
      - name: Set image info
        id: image-info
        run: |
          IMAGE="${{ env.DOCKER_REGISTRY }}/documind/app"
          TAG="${{ needs.validate.outputs.version }}"
          echo "image=${IMAGE}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.image-info.outputs.image }}:${{ steps.image-info.outputs.tag }},${{ steps.image-info.outputs.image }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production
            BUILD_ID=${{ github.run_id }}
            VERSION=${{ steps.image-info.outputs.tag }}
            
  test:
    name: Run Tests
    needs: [validate, build]
    runs-on: ubuntu-latest
    environment: ${{ needs.validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests
        run: npm test
        
      - name: Set up integration test environment
        run: |
          docker pull ${{ needs.build.outputs.image }}:${{ needs.build.outputs.tag }}
          docker-compose -f docker-compose.test.yml up -d
          
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Collect test logs
        if: always()
        run: |
          mkdir -p test-logs
          docker-compose -f docker-compose.test.yml logs > test-logs/docker-compose.log
          
      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-logs-${{ needs.validate.outputs.environment }}
          path: test-logs/
          
  security-scan:
    name: Security Scan
    needs: [validate, build]
    runs-on: ubuntu-latest
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image }}:${{ needs.build.outputs.tag }}
          format: 'table'
          exit-code: '0'  # Don't fail the build yet
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Run OWASP ZAP scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: https://${{ needs.validate.outputs.environment }}-preview.documind.io
          
  deploy:
    name: Deploy to ${{ needs.validate.outputs.environment }}
    needs: [validate, build, test, security-scan]
    runs-on: ubuntu-latest
    environment: ${{ needs.validate.outputs.environment }}
    concurrency: deploy-${{ needs.validate.outputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy with Terraform
        if: needs.validate.outputs.environment == 'production'
        run: |
          cd terraform
          terraform init
          terraform validate
          terraform plan -var="app_image_tag=${{ needs.build.outputs.tag }}" -out=tfplan
          terraform apply -auto-approve tfplan
          
      - name: Deploy with docker-compose
        if: needs.validate.outputs.environment == 'staging'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/documind
            echo "IMAGE_TAG=${{ needs.build.outputs.tag }}" > .env.deploy
            docker-compose -f docker-compose.yml -f docker-compose.${{ needs.validate.outputs.environment }}.yml pull
            docker-compose -f docker-compose.yml -f docker-compose.${{ needs.validate.outputs.environment }}.yml up -d
            
      - name: Deploy with Docker Swarm
        if: needs.validate.outputs.environment == 'production'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SWARM_MANAGER_HOST }}
          username: ${{ secrets.SWARM_SSH_USER }}
          key: ${{ secrets.SWARM_SSH_KEY }}
          script: |
            cd /opt/documind
            echo "IMAGE_TAG=${{ needs.build.outputs.tag }}" > .env.deploy
            docker stack deploy --with-registry-auth -c docker-compose.yml -c docker-compose.prod.yml documind
            
      - name: Verify deployment
        run: |
          echo "Verifying deployment to ${{ needs.validate.outputs.environment }}..."
          ./scripts/verify-deployment.sh ${{ needs.validate.outputs.environment }} ${{ needs.build.outputs.tag }}
            
  post-deploy:
    name: Post-Deployment Tasks
    needs: [validate, build, deploy]
    runs-on: ubuntu-latest
    environment: ${{ needs.validate.outputs.environment }}
    if: success()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Run database migrations
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            cd /opt/documind
            docker-compose exec -T app npm run migrations
            
      - name: Update monitoring dashboard
        run: |
          curl -X POST ${{ secrets.GRAFANA_API_URL }}/api/dashboards/db \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @monitoring/dashboards/application.json
            
      - name: Send deployment notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "ðŸš€ Deployment Successful"
          SLACK_MESSAGE: "Documind has been successfully deployed to ${{ needs.validate.outputs.environment }} with version ${{ needs.build.outputs.tag }}"
          SLACK_COLOR: "good"
