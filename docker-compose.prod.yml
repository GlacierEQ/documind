version: '3.8'

services:
  # Application service configured for production
  app:
    image: documind/app:${IMAGE_TAG:-latest}
    deploy:
      mode: replicated
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '1'
          memory: 2G
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.documind.rule=Host(`documind.example.com`)"
        - "traefik.http.routers.documind.entrypoints=websecure"
        - "traefik.http.routers.documind.tls.certresolver=letsencrypt"
        - "traefik.http.services.documind.loadbalancer.server.port=3000"
    volumes:
      - app_data:/app/data
      - /var/log/documind:/app/logs
    env_file:
      - .env.docker
      - .env.prod
      - .env.secrets
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database - PostgreSQL for production
  db:
    image: postgres:14-alpine
    deploy:
      placement:
        constraints:
          - node.labels.database == true
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '2'
          memory: 4G
    volumes:
      - db_data:/var/lib/postgresql/data
      - /var/log/documind/postgres:/var/log/postgresql
      - ./docker/db/postgres.conf:/etc/postgresql/postgresql.conf:ro
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-documind}
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-documind}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Traefik reverse proxy
  traefik:
    image: traefik:v2.9
    ports:
      - "80:80"
      - "443:443"
    deploy:
      mode: global
      placement:
        constraints:
          - node.role == manager
    command:
      - "--api.dashboard=true"
      - "--api.insecure=false"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      - "--metrics.prometheus=true"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data:/data
      - traefik_certs:/acme.json
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.documind.example.com`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=${TRAEFIK_AUTH}"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Backup service - enhanced for production
  backup:
    image: documind/backup:${IMAGE_TAG:-latest}
    build:
      context: ./docker/backup
      dockerfile: Dockerfile
    deploy:
      placement:
        constraints:
          - node.labels.backup == true
    volumes:
      - app_data:/data/app:ro
      - db_data:/data/db:ro
      - /var/backups/documind:/backups
      - /var/log/documind/backup:/var/log/backup
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 0 * * *}
      - DB_TYPE=${DB_TYPE:-postgres}
      - DB_HOST=db
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-documind}
      - RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-14}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - S3_PREFIX=${BACKUP_S3_PREFIX:-documind-backups}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - ENCRYPTION_KEY=${BACKUP_ENCRYPTION_KEY}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus monitoring
  prometheus:
    image: prom/prometheus:latest
    deploy:
      placement:
        constraints:
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 1G
    volumes:
      - ./docker/prometheus/prometheus-prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.documind.example.com`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.routers.prometheus.middlewares=metrics-auth"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Grafana dashboard
  grafana:
    image: grafana/grafana:latest
    deploy:
      placement:
        constraints:
          - node.labels.monitoring == true
      resources:
        limits:
          memory: 1G
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=https://grafana.documind.example.com
      - GF_SMTP_ENABLED=${GRAFANA_SMTP_ENABLED:-false}
      - GF_SMTP_HOST=${SMTP_HOST}
      - GF_SMTP_USER=${SMTP_USER}
      - GF_SMTP_PASSWORD=${SMTP_PASSWORD}
      - GF_SMTP_FROM_ADDRESS=${GRAFANA_SMTP_FROM_ADDRESS:-grafana@documind.example.com}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.documind.example.com`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# Define volume configuration for production
volumes:
  app_data:
    driver: ${VOLUME_DRIVER:-local}
    driver_opts:
      type: ${VOLUME_TYPE:-none}
      device: ${APP_DATA_DEVICE:-/mnt/documind/app_data}
      o: ${VOLUME_OPTIONS:-bind}
  db_data:
    driver: ${VOLUME_DRIVER:-local}
    driver_opts:
      type: ${VOLUME_TYPE:-none}
      device: ${DB_DATA_DEVICE:-/mnt/documind/db_data}
      o: ${VOLUME_OPTIONS:-bind}
  redis_data:
    driver: ${VOLUME_DRIVER:-local}
    driver_opts:
      type: ${VOLUME_TYPE:-none}
      device: ${REDIS_DATA_DEVICE:-/mnt/documind/redis_data}
      o: ${VOLUME_OPTIONS:-bind}
  traefik_data:
  traefik_certs:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: overlay
    attachable: true
    driver_opts:
      encrypted: "true"
